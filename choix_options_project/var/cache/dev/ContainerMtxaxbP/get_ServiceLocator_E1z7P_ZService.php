<?php

namespace ContainerMtxaxbP;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_E1z7P_ZService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.E1z7P.Z' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.E1z7P.Z'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'em' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
            'encryptor' => ['privates', 'SpecShaper\\EncryptBundle\\Encryptors\\EncryptorInterface', 'getEncryptorInterfaceService', false],
            'passwordHasher' => ['privates', 'security.user_password_hasher', 'getSecurity_UserPasswordHasherService', true],
            'promotion' => ['privates', '.errored.jay8kSG', NULL, 'Cannot determine controller argument for "App\\Controller\\StudentController::index()": the $promotion argument is type-hinted with the non-existent class or interface: "App\\Entity\\Promotion".'],
            'promotionRepository' => ['privates', '.errored.Cq.qEKL', NULL, 'Cannot determine controller argument for "App\\Controller\\StudentController::index()": the $promotionRepository argument is type-hinted with the non-existent class or interface: "App\\Repository\\PromotionRepository".'],
            'studentRepository' => ['privates', 'App\\Repository\\StudentRepository', 'getStudentRepositoryService', true],
            'userRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'em' => '?',
            'encryptor' => 'SpecShaper\\EncryptBundle\\Encryptors\\EncryptorInterface',
            'passwordHasher' => '?',
            'promotion' => '?',
            'promotionRepository' => '?',
            'studentRepository' => 'App\\Repository\\StudentRepository',
            'userRepository' => 'App\\Repository\\UserRepository',
        ]);
    }
}
